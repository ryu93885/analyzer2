# -*- coding: utf-8 -*-
"""analyzer2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oVJZzo_YkJSu2EPIverrVVXca9TiuZal
"""

import pandas as pd
import gradio as gr
import os
from datetime import datetime
import tempfile

class ProblemAnalyzer:
    def __init__(self):
        self.results = []
        self.subjects = {}  # 教科ごとのデータフレームを管理
        self.current_subject = "未設定"  # 現在の教科
        self.groups = {
            1: "得意な問題のグループ\n発展問題に挑戦する\n解法を他人に説明する\n別視点の解法で解いてみる",
            2: "確認が必要なグループ\n解答を読み直して再度解く\n類似問題を解いて定着を図る",
            3: "計算ミスの傾向を修正\nミスのパターンを分析し、注意点をまとめる\n丁寧に計算する練習を行う",
            4: "一時的なミス\n同じ問題を解いて再確認する\n次の問題に挑む",
            5: "基礎知識の再暗記\n暗記カードやノートを使用して基本事項を再暗記する\n毎日繰り返し復習する",
            6: "応用知識の補強\n教科書や参考書の該当範囲を復習する\n応用問題に取り組み理解を深める",
            7: "応用力の強化\n類似問題を複数解いて応用力を養う\n解法のパターンを整理し、ほかの問題に応用する",
            8: "基礎からのやり直し\n基礎的な問題からやり直し、理解を固める\n解説を読み基本を確認する",
            9: "用語知識の補強\n用語集や辞書を使って用語の意味を確認する\nまとめノートを作成し,定期的に見直す",
            10: "読解力の向上\n国語の読解問題や、要約の練習を行う\n読書の時間を確保し、読解力を高める。",
            11: "根本的な理解の深化\n教科書や参考書を読み直す\n先生や友人に質問をして理解を深める"
        }

    def set_subject(self, subject_name):
        if subject_name and subject_name != "":
            self.current_subject = subject_name
            if subject_name not in self.subjects:
                self.subjects[subject_name] = []
            self.results = self.subjects[subject_name]
            return f"教科「{subject_name}」の分析を開始します。"
        else:
            return "教科名を入力してください。"

    def analyze_problem(self, subject_input, problem_number, correct, hesitation=None, cause=None, mistake=None, knowledge=None, experience=None, issue=None, comment=""):
        if not all([problem_number, correct]):
            return "問題番号と正解状況を選択してください。"
        if not subject_input:
            return "教科名を入力してください。"
        try:
            if correct == "正解":
                group = 1 if hesitation == "スムーズに解けた" else 2
            else:
                if cause == "計算ミスやケアレスミス":
                    group = 3 if mistake == "同じミスを繰り返している" else 4
                elif cause == "知識不足":
                    group = 5 if knowledge == "基本事項の暗記ミス" else 6
                elif cause == "解法が思いつかない":
                    group = 7 if experience == "類似問題の経験あり" else 8
                elif cause == "問題文の理解不足":
                    group = {"用語の意味が分からない": 9, "問題文の日本語が難しい": 10, "解答を読んでも理解できない": 11}[issue]
                else:
                    return "原因を選択してください。"

            # 重複問題のチェック
            comparison_result = ""
            for idx, existing_problem in enumerate(self.results):
                if existing_problem['問題番号'] == problem_number:
                    old_group = existing_problem['グループ番号']

                    # 過去と現在の結果に基づいてコメントを生成
                    if old_group in [1, 2] and group in [1, 2]:
                        comparison_result = "継続してよい学習できています"
                    elif old_group in [1, 2] and group not in [1, 2]:
                        comparison_result = "過去にできた問題です。復習が必要なようです。"
                    elif old_group not in [1, 2] and group in [1, 2]:
                        comparison_result = "とても良い学習ができています。自信をもって学習を継続しましょう。"
                    else:
                        comparison_result = "得点までもう少し、あなたの努力は確実に変わっています。実力がついています。"

                    # 古いエントリを削除
                    self.results.pop(idx)
                    break

            problem_info = {
                '問題番号': problem_number,
                'グループ番号': group,
                '学習方法': self.groups[group],
                'コメント': comparison_result if comparison_result else comment
            }
            self.results.append(problem_info)

            # 結果の保存と教科データの更新
            self.subjects[self.current_subject] = self.results

            # 分析結果のテキスト作成
            result_text = f"問題番号 {problem_number} は【グループ{group}】です。\n\n推奨される学習方法:\n{self.groups[group]}"

            # 得点率と完全解答率の計算
            if self.results:
                score_rate, perfect_rate = self.calculate_rates()
                result_text += f"\n\n得点率: {score_rate:.1f}%\n完全解答率: {perfect_rate:.1f}%"

            # 重複問題の場合、比較結果を追加
            if comparison_result:
                result_text += f"\n\n【重複問題の分析】\n{comparison_result}"

            return result_text
        except Exception as e:
            return f"分析中にエラーが発生しました: {str(e)}"

    def calculate_rates(self):
        """得点率と完全解答率を計算する"""
        if not self.results:
            return 0, 0

        total_problems = len(self.results)
        group_1_2_count = sum(1 for item in self.results if item['グループ番号'] in [1, 2])
        group_1_count = sum(1 for item in self.results if item['グループ番号'] == 1)

        score_rate = (group_1_2_count / total_problems) * 100 if total_problems > 0 else 0
        perfect_rate = (group_1_count / total_problems) * 100 if total_problems > 0 else 0

        return score_rate, perfect_rate

    def save_results(self):
        """すべての教科のデータを別々のExcelファイルとして保存する"""
        try:
            if not self.subjects or all(not data for data in self.subjects.values()):
                return "保存するデータがありません。"

            timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
            file_paths = []

            # 一時ディレクトリを作成（Hugging Face対応）
            temp_dir = tempfile.mkdtemp()

            # 教科が2つ以上ある場合、すべての教科のデータを個別に保存
            subject_count = len([s for s, data in self.subjects.items() if data])

            if subject_count >= 2:
                for subject, data in self.subjects.items():
                    if not data:  # 空のデータはスキップ
                        continue

                    # DataFrameを作成し、グループ番号で昇順に並び替え
                    df = pd.DataFrame(data)
                    df_sorted = df.sort_values('グループ番号')

                    # ファイル名に教科名を含める
                    file_name = f"学習問題分析結果_{subject}_{timestamp}.xlsx"
                    file_path = os.path.join(temp_dir, file_name)
                    df_sorted.to_excel(file_path, index=False, engine="openpyxl")
                    file_paths.append(file_path)

                # 全科目の統合ファイルも作成
                all_subjects_data = []
                for subject, data in self.subjects.items():
                    if not data:
                        continue

                    # 各レコードに教科名を追加
                    for record in data:
                        subject_record = record.copy()
                        subject_record['教科'] = subject
                        all_subjects_data.append(subject_record)

                if all_subjects_data:
                    all_df = pd.DataFrame(all_subjects_data)
                    all_df_sorted = all_df.sort_values(['教科', 'グループ番号'])
                    all_file_name = f"学習問題分析結果_全教科統合_{timestamp}.xlsx"
                    all_file_path = os.path.join(temp_dir, all_file_name)
                    all_df_sorted.to_excel(all_file_path, index=False, engine="openpyxl")
                    file_paths.append(all_file_path)

            # 教科が1つだけの場合、現在の教科のデータだけを保存
            elif self.current_subject in self.subjects and self.subjects[self.current_subject]:
                # DataFrameを作成し、グループ番号で昇順に並び替え
                df = pd.DataFrame(self.subjects[self.current_subject])
                df_sorted = df.sort_values('グループ番号')

                # ファイル名に教科名を含める
                file_name = f"学習問題分析結果_{self.current_subject}_{timestamp}.xlsx"
                file_path = os.path.join(temp_dir, file_name)
                df_sorted.to_excel(file_path, index=False, engine="openpyxl")
                file_paths.append(file_path)
            else:
                return "保存するデータがありません。"

            return file_paths

        except Exception as e:
            return f"保存中にエラーが発生しました: {str(e)}"

    def import_excel(self, file_path):
        """Excelファイルからデータをインポートする"""
        try:
            if not file_path or not os.path.exists(file_path):
                return "ファイルが見つかりません。"

            if not file_path.endswith('.xlsx'):
                return "サポートされているのは.xlsxファイルのみです。"

            df = pd.read_excel(file_path, engine="openpyxl")

            # 必要なカラムが存在するか確認
            required_columns = ['問題番号', 'グループ番号', '学習方法']
            if not all(col in df.columns for col in required_columns):
                return "ファイル形式が正しくありません。必要なカラムが見つかりません。"

            # 教科列がある場合は、教科ごとにデータを振り分ける
            if '教科' in df.columns:
                # 教科ごとにデータを分割
                subject_groups = df.groupby('教科')
                imported_count = 0

                for subject, group_df in subject_groups:
                    # 教科列を除外したデータを取得
                    subject_data = group_df.drop('教科', axis=1).to_dict('records')

                    # コメント列がない場合は追加
                    for item in subject_data:
                        if 'コメント' not in item:
                            item['コメント'] = ""

                    # 該当する教科のデータに追加
                    if subject not in self.subjects:
                        self.subjects[subject] = []

                    self.subjects[subject].extend(subject_data)
                    imported_count += len(subject_data)

                # 現在の教科を更新
                if self.current_subject in self.subjects:
                    self.results = self.subjects[self.current_subject]

                return f"{imported_count}件のデータを{len(subject_groups)}教科にインポートしました。"
            else:
                # 教科列がない場合は現在の教科に追加
                imported_data = df.to_dict('records')

                # コメント列がない場合は追加
                for item in imported_data:
                    if 'コメント' not in item:
                        item['コメント'] = ""

                # 現在の教科のデータに追加
                self.results.extend(imported_data)
                self.subjects[self.current_subject] = self.results

                return f"{len(imported_data)}件のデータを「{self.current_subject}」にインポートしました。"
        except Exception as e:
            return f"インポート中にエラーが発生しました: {str(e)}"

# Global analyzer instance
analyzer = ProblemAnalyzer()

def analyze_problem_ui(subject_input, problem_number, correct, hesitation=None, cause=None, mistake=None, knowledge=None, experience=None, issue=None):
    """UIからの入力を分析関数に渡す"""
    if not all([problem_number, correct]):
        return "問題番号と正解状況を選択してください。"

    # 正解の場合
    if correct == "正解" and hesitation is None:
        return "解答プロセスを選択してください。"

    # 不正解の場合
    if correct == "不正解":
        if cause is None:
            return "間違いの原因を選択してください。"

        if cause == "計算ミスやケアレスミス" and mistake is None:
            return "計算ミスの傾向を選択してください。"

        if cause == "知識不足" and knowledge is None:
            return "知識のレベルを選択してください。"

        if cause == "解法が思いつかない" and experience is None:
            return "解法の経験を選択してください。"

        if cause == "問題文の理解不足" and issue is None:
            return "理解不足の詳細を選択してください。"

    # 条件が満たされた場合、分析実行
    return analyzer.analyze_problem(subject_input, problem_number, correct, hesitation, cause, mistake, knowledge, experience, issue)

def download_results():
    """結果ファイルを保存して返す"""
    result = analyzer.save_results()

    # 文字列の場合はエラーメッセージ
    if isinstance(result, str):
        return gr.update(value=None, visible=False)

    # 複数ファイルの場合（リストで返却される）
    if isinstance(result, list) and result:
        # file_paths のリストをそのまま返す
        return gr.update(value=result, visible=True)

    return gr.update(value=None, visible=False)

def reset_selections():
    # Reset only the form fields, keep the analyzer instance intact
    return (None, gr.update(visible=False, value=None), gr.update(visible=False, value=None), gr.update(visible=False, value=None),
            gr.update(visible=False, value=None), gr.update(visible=False, value=None), gr.update(visible=False, value=None), "", None)

def restart_app():
    # Keep the analyzer instance but reset the current results
    analyzer.results = []
    analyzer.subjects[analyzer.current_subject] = []
    return reset_selections()

def change_subject():
    # 新しい教科分析への切り替え - データを保持したまま、新しい教科の入力フォームに切り替える
    analyzer.results = []  # 現在の入力フォームはリセット
    return reset_selections()

def increment_problem_number(problem_number):
    return problem_number + 1 if problem_number is not None else 1

def set_current_subject(subject_name):
    result = analyzer.set_subject(subject_name)
    return result

def handle_file_upload(file):
    if file is None:
        return "ファイルがアップロードされていません。", gr.update(visible=False), gr.update(visible=True)

    result = analyzer.import_excel(file.name)
    # ファイルアップロード後、追加アップロードの確認を表示
    return result, gr.update(visible=True), gr.update(visible=False)

def handle_upload_question(choice):
    if choice == "Yes":
        return gr.update(visible=True), gr.update(visible=False), gr.update(visible=False), "ファイルをアップロードしてください。"
    else:
        return gr.update(visible=False), gr.update(visible=True), gr.update(visible=False), "アップロードをスキップしました。"

def handle_additional_upload_question(choice):
    if choice == "Yes":
        # 追加でアップロードする場合、ファイルアップロード画面を再表示
        return gr.update(visible=True), gr.update(visible=False), gr.update(visible=False)
    else:
        # 追加アップロードしない場合、分析画面へ移行
        return gr.update(visible=False), gr.update(visible=True), gr.update(visible=False)

def get_subject_summary():
    """教科ごとのデータ数と状況をまとめたテキストを返す"""
    subject_info = []

    for subject, data in analyzer.subjects.items():
        if data:  # データがある場合のみ
            score_rate = 0
            perfect_rate = 0

            # グループ1と2の問題数、グループ1の問題数を数える
            total_problems = len(data)
            group_1_2_count = sum(1 for item in data if item['グループ番号'] in [1, 2])
            group_1_count = sum(1 for item in data if item['グループ番号'] == 1)

            # 得点率と完全解答率を計算
            if total_problems > 0:
                score_rate = (group_1_2_count / total_problems) * 100
                perfect_rate = (group_1_count / total_problems) * 100

            subject_info.append(f"教科「{subject}」: {total_problems}問 (得点率: {score_rate:.1f}%, 完全解答率: {perfect_rate:.1f}%)")

    if subject_info:
        return "【分析済み教科の概要】\n" + "\n".join(subject_info)
    else:
        return "分析済みのデータがありません。"

def reset_ui_completely():
    """UI要素を完全に初期化する（「ほかの教科を分析する」用）"""
    return (
        gr.update(value=""), # 教科入力欄
        gr.update(value="未設定"), # 現在の教科
        gr.update(visible=True), # 初期画面
        gr.update(visible=False), # 分析画面
        gr.update(visible=True, value=None), # アップロード質問
        gr.update(visible=False), # ファイルアップロード
        gr.update(visible=False), # 追加アップロード質問
        gr.update(value=""), # アップロード結果
        gr.update(value=None), # 問題番号
        gr.update(value=None), # 正解状況
        gr.update(visible=False, value=None), # 解答プロセス
        gr.update(visible=False, value=None), # 間違いの原因
        gr.update(visible=False, value=None), # 計算ミスの傾向
        gr.update(visible=False, value=None), # 知識のレベル
        gr.update(visible=False, value=None), # 解法の経験
        gr.update(visible=False, value=None), # 理解不足の詳細
        gr.update(value=""), # 分析結果
        gr.update(visible=False, value=None) # ダウンロードファイル
    )

with gr.Blocks() as app:
    gr.Markdown("# 学習問題分析プログラム")

    # 現在の教科を表示するテキスト
    current_subject_text = gr.Textbox(label="現在の教科", value="未設定", interactive=False)

    # 教科概要を表示するテキスト
    subject_summary_text = gr.Textbox(label="教科概要", value="", interactive=False)

    # 教科設定用のコンポーネント
    with gr.Row():
        subject_input = gr.Textbox(label="教科名")
        set_subject_button = gr.Button("教科を設定")

    # ファイルアップロード関連のコンポーネント
    upload_question = gr.Radio(["Yes", "No"], label="過去のデータをインポートしますか？", visible=True)
    file_upload = gr.File(label="分析データファイル (.xlsx)", visible=False)
    additional_upload_question = gr.Radio(["Yes", "No"], label="追加でファイルをアップロードしますか？", visible=False)
    upload_result = gr.Textbox(label="インポート結果", visible=True)

    # 初期画面と分析画面の切り替え
    initial_screen = gr.Group(visible=True)
    analysis_screen = gr.Group(visible=False)

    with initial_screen:
        gr.Markdown("## データのインポート")
        gr.Markdown("教科を設定してからデータをインポートできます。")

    with analysis_screen:
        problem_number = gr.Number(label="問題番号", value=1)
        correct = gr.Radio(["正解", "不正解"], label="正解状況")

        hesitation = gr.Radio(["スムーズに解けた", "途中で手が止まった"], label="解答プロセス", visible=False)
        cause = gr.Radio(["計算ミスやケアレスミス", "知識不足", "解法が思いつかない", "問題文の理解不足"], label="間違いの原因", visible=False)
        mistake = gr.Radio(["初めてのミス", "同じミスを繰り返している"], label="計算ミスの傾向", visible=False)
        knowledge = gr.Radio(["基本事項の暗記ミス", "応用知識の不足"], label="知識のレベル", visible=False)
        experience = gr.Radio(["類似問題の経験あり", "全く経験がない"], label="解法の経験", visible=False)
        issue = gr.Radio(["用語の意味が分からない", "問題文の日本語が難しい", "解答を読んでも理解できない"], label="理解不足の詳細", visible=False)

        output_text = gr.Textbox(label="分析結果", interactive=False)

        with gr.Row():
            download_button = gr.Button("結果をダウンロード")
            continue_button = gr.Button("続けて入力")
            end_button = gr.Button("分析を終了")
            change_subject_button = gr.Button("別の教科を分析する")

        # ダウンロードファイル
        download_files = gr.File(label="ダウンロードファイル", visible=False, file_count="multiple", type="filepath")

    # 教科設定
    set_subject_button.click(
        fn=set_current_subject,
        inputs=subject_input,
        outputs=current_subject_text
    ).then(
        fn=lambda: gr.update(visible=True),
        inputs=[],
        outputs=upload_question
    ).then(
        fn=get_subject_summary,
        inputs=[],
        outputs=subject_summary_text
    )

    # ファイルアップロード処理
    upload_question.change(
        fn=handle_upload_question,
        inputs=upload_question,
        outputs=[file_upload, analysis_screen, additional_upload_question, upload_result]
    )

    file_upload.change(
        fn=handle_file_upload,
        inputs=file_upload,
        outputs=[upload_result, additional_upload_question, file_upload]
    )

    # 追加アップロード処理
    additional_upload_question.change(
        fn=handle_additional_upload_question,
        inputs=additional_upload_question,
        outputs=[file_upload, analysis_screen, additional_upload_question]
    ).then(
        fn=get_subject_summary,
        inputs=[],
        outputs=subject_summary_text
    )

    # 分析終了後、ファイルアップロード画面に戻る
    def show_upload_screen():
        return gr.update(visible=True), gr.update(visible=False)

    # ボタンのイベント設定
    download_button.click(
        fn=download_results,
        inputs=[],
        outputs=download_files
    ).then(
        fn=get_subject_summary,
        inputs=[],
        outputs=subject_summary_text
    )

    continue_button.click(
        fn=reset_selections,
        inputs=[],
        outputs=[correct, hesitation, cause, mistake, knowledge, experience, issue, output_text, problem_number]
    ).then(
        fn=get_subject_summary,
        inputs=[],
        outputs=subject_summary_text
    )

    end_button.click(
        fn=restart_app,
        inputs=[],
        outputs=[correct, hesitation, cause, mistake, knowledge, experience, issue, output_text, problem_number]
    ).then(
        fn=show_upload_screen,
        inputs=[],
        outputs=[upload_question, analysis_screen]
    ).then(
        fn=get_subject_summary,
        inputs=[],
        outputs=subject_summary_text
    )

    # 別の教科を分析するボタンの処理を変更（完全初期化）
    change_subject_button.click(
        fn=lambda: (
            # 現在の科目の結果をクリア
            analyzer.results.clear() if hasattr(analyzer, 'results') else None,
            # ここでUIコンポーネントの結果をクリア
        ),
        inputs=[],
        outputs=[]
    ).then(
        fn=reset_ui_completely,
        inputs=[],
        outputs=[
            subject_input, current_subject_text, initial_screen, analysis_screen,
            upload_question, file_upload, additional_upload_question, upload_result,
            problem_number, correct, hesitation, cause, mistake, knowledge, experience, issue,
            output_text, download_files
        ]
    ).then(
        fn=get_subject_summary,
        inputs=[],
        outputs=subject_summary_text
    )

    # 条件付き表示の設定
    correct.change(lambda v: gr.update(visible=(v == "正解")), inputs=correct, outputs=hesitation)
    correct.change(lambda v: gr.update(visible=(v == "不正解")), inputs=correct, outputs=cause)

    cause.change(lambda v: gr.update(visible=(v == "計算ミスやケアレスミス")), inputs=cause, outputs=mistake)
    cause.change(lambda v: gr.update(visible=(v == "知識不足")), inputs=cause, outputs=knowledge)
    cause.change(lambda v: gr.update(visible=(v == "解法が思いつかない")), inputs=cause, outputs=experience)
    cause.change(lambda v: gr.update(visible=(v == "問題文の理解不足")), inputs=cause, outputs=issue)

    # No を選択した場合に分析画面を表示する
    upload_question.change(
        fn=lambda choice: gr.update(visible=(choice == "No")),
        inputs=upload_question,
        outputs=analysis_screen
    )

    # 選択肢が変わるたびに分析結果を更新する設定
    problem_number.change(
        fn=analyze_problem_ui,
        inputs=[subject_input, problem_number, correct, hesitation, cause, mistake, knowledge, experience, issue],
        outputs=output_text
    )

    correct.change(
        fn=analyze_problem_ui,
        inputs=[subject_input, problem_number, correct, hesitation, cause, mistake, knowledge, experience, issue],
        outputs=output_text
    )

    hesitation.change(
        fn=analyze_problem_ui,
        inputs=[subject_input, problem_number, correct, hesitation, cause, mistake, knowledge, experience, issue],
        outputs=output_text
    )

    cause.change(
        fn=analyze_problem_ui,
        inputs=[subject_input, problem_number, correct, hesitation, cause, mistake, knowledge, experience, issue],
        outputs=output_text
    )

    mistake.change(
        fn=analyze_problem_ui,
        inputs=[subject_input, problem_number, correct, hesitation, cause, mistake, knowledge, experience, issue],
        outputs=output_text
    )

    knowledge.change(
        fn=analyze_problem_ui,
        inputs=[subject_input, problem_number, correct, hesitation, cause, mistake, knowledge, experience, issue],
        outputs=output_text
    )
    experience.change(
        fn=analyze_problem_ui,
        inputs=[subject_input,problem_number, correct, hesitation, cause, mistake, knowledge, experience, issue],
        outputs=output_text
    )

    issue.change(
        fn=analyze_problem_ui,
        inputs=[subject_input,problem_number, correct, hesitation, cause, mistake, knowledge, experience, issue],
        outputs=output_text
    )

    set_subject_button.click(
        fn = analyze_problem_ui,
        inputs=[subject_input, problem_number, correct, hesitation, cause, mistake, knowledge, experience, issue],
        outputs=output_text
    )


app.launch()